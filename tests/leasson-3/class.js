class ClassRoom {
    constructor(className, teacher) {
        this.className = className;
        this.teacher = teacher;
        this.students = [];
        this.subjects = ["To√°n", "L√Ω", "H√≥a", "VƒÉn", "Anh"];
    }
    // th√™m h·ªçc sinh v√†o l·ªõp v√† t√¨m h·ªçc sinh tr√πng m√£
    addStudent(student) {
    // Ki·ªÉm tra xem h·ªçc sinh c√≥ m√£ tr√πng kh√¥ng
    const isDuplicate = this.students.some(s => s.studentId === student.studentId);

    if (isDuplicate) {
        console.log(`‚ùå H·ªçc sinh v·ªõi m√£ "${student.studentId}" ƒë√£ t·ªìn t·∫°i trong l·ªõp.`);
        return false;
    }

    this.students.push(student);
    console.log(`‚úÖ ƒê√£ th√™m h·ªçc sinh: ${student.name} (${student.studentId}) v√†o l·ªõp ${this.className}`);
    return true;
}
// x√≥a h·ªçc sinh kh·ªèi l·ªõp 
removeStudent(studentId) {
    const index = this.students.findIndex(s => s.studentId === studentId);

    if (index === -1) {
        console.log(`‚ùå Kh√¥ng t√¨m th·∫•y h·ªçc sinh v·ªõi m√£ "${studentId}" trong l·ªõp.`);
        return false;
    }

    const removed = this.students.splice(index, 1)[0];
    console.log(`‚úÖ ƒê√£ xo√° h·ªçc sinh: ${removed.name} (${removed.studentId}) kh·ªèi l·ªõp.`);
    return true;
}
//T√¨m h·ªçc sinh theo m√£ 
   findStudent(keyword) {
    const lowerKeyword = keyword.toLowerCase();

    const results = this.students.filter(student => {
        return (
            student.name.toLowerCase().includes(lowerKeyword) ||
            student.studentId.toLowerCase().includes(lowerKeyword)
        );
    });

    if (results.length === 0) {
        console.log(`‚ùå Kh√¥ng t√¨m th·∫•y h·ªçc sinh n√†o kh·ªõp v·ªõi t·ª´ kho√°: "${keyword}"`);
    } else {
        console.log(`üîç K·∫øt qu·∫£ t√¨m ki·∫øm v·ªõi t·ª´ kho√° "${keyword}":`);
        results.forEach(student => {
            console.log(`- ${student.name} (${student.studentId})`);
        });
    }

    return results;
} // th·ªëng k√™ v√†o b√°o c√°o
getClassAverage() {
    if (this.students.length === 0) {
        console.log("‚ö†Ô∏è L·ªõp ch∆∞a c√≥ h·ªçc sinh.");
        return 0;
    }

    // L·∫•y ƒëi·ªÉm trung b√¨nh c·ªßa t·ª´ng h·ªçc sinh
    const totalAverage = this.students.reduce((sum, student) => {
        if (typeof student.getAverageScore === 'function') {
            return sum + student.getAverageScore();
        }
        return sum;
    }, 0);

    const classAverage = totalAverage / this.students.length;
    return parseFloat(classAverage.toFixed(2));
} //L·∫•y h·ªçc sinh gi·ªèi nh·∫•t
getTopStudents(count = 3) {
    if (this.students.length === 0) {
        console.log("‚ö†Ô∏è L·ªõp ch∆∞a c√≥ h·ªçc sinh.");
        return [];
    }

    // L·ªçc h·ªçc sinh c√≥ h√†m getAverageScore v√† t√≠nh ƒëi·ªÉm
    const sortedStudents = this.students
        .filter(student => typeof student.getAverageScore === 'function')
        .sort((a, b) => b.getAverageScore() - a.getAverageScore());

    const topStudents = sortedStudents.slice(0, count);

    console.log(`üèÜ Top ${topStudents.length} h·ªçc sinh ƒëi·ªÉm cao nh·∫•t:`);
    topStudents.forEach((student, index) => {
        console.log(
            `${index + 1}. ${student.name} (${student.studentId}) - ƒêi·ªÉm TB: ${student.getAverageScore().toFixed(2)}`
        );
    });

    return topStudents; 
} 
// th·ªëng k√™ ƒëi·ªÉm m√¥n h·ªçc ( ƒëi·ªÉm cao nh·∫•t , th·∫•p nh·∫•t , x·∫øt lo·∫°i 
getSubjectStatistics(subject) {
    if (this.students.length === 0) {
        console.log("‚ö†Ô∏è L·ªõp ch∆∞a c√≥ h·ªçc sinh.");
        return;
    }

    // L·∫•y danh s√°ch ƒëi·ªÉm m√¥n h·ªçc c·ªßa h·ªçc sinh (n·∫øu c√≥)
    const subjectScores = this.students
        .map(student => {
            const record = student.scores.find(s => s.subject.toLowerCase() === subject.toLowerCase());
            return record ? record.score : null;
        })
        .filter(score => score !== null);

    if (subjectScores.length === 0) {
        console.log(`‚ö†Ô∏è Kh√¥ng c√≥ ƒëi·ªÉm n√†o cho m√¥n "${subject}".`);
        return;
    }

    // T√≠nh to√°n th·ªëng k√™
    const max = Math.max(...subjectScores);
    const min = Math.min(...subjectScores);
    const avg = subjectScores.reduce((a, b) => a + b, 0) / subjectScores.length;

    // Ph√¢n lo·∫°i h·ªçc sinh
    const types = {
        Gioi: 0,
        Kha: 0,
        TrungBinh: 0,
        Yeu: 0
    };

    subjectScores.forEach(score => {
        if (score >= 8.5) types.Gioi++;
        else if (score >= 7) types.Kha++;
        else if (score >= 5) types.TrungBinh++;
        else types.Yeu++;
    });

    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    console.log(`üìä Th·ªëng k√™ m√¥n "${subject}":`);
    console.log(`- S·ªë h·ªçc sinh c√≥ ƒëi·ªÉm: ${subjectScores.length}`);
    console.log(`- ƒêi·ªÉm cao nh·∫•t: ${max}`);
    console.log(`- ƒêi·ªÉm th·∫•p nh·∫•t: ${min}`);
    console.log(`- ƒêi·ªÉm trung b√¨nh: ${avg.toFixed(2)}`);
    console.log(`- X·∫øp lo·∫°i:`);
    console.log(`  ‚ñ∏ Gi·ªèi: ${types.Gioi}`);
    console.log(`  ‚ñ∏ Kh√°: ${types.Kha}`);
    console.log(`  ‚ñ∏ Trung b√¨nh: ${types.TrungBinh}`);
    console.log(`  ‚ñ∏ Y·∫øu: ${types.Yeu}`);
}
generateReport() {
    console.log("üìù ===== B√ÅO C√ÅO T·ªîNG H·ª¢P L·ªöP =====");

    // 1. Th√¥ng tin l·ªõp h·ªçc
    console.log(`üìö T√™n l·ªõp: ${this.className}`);
    console.log(`üë©‚Äçüè´ Gi√°o vi√™n ch·ªß nhi·ªám: ${this.teacher}`);
    console.log(`üë• Sƒ© s·ªë: ${this.students.length}`);
    console.log("\nüë®‚Äçüéì Danh s√°ch h·ªçc sinh:");

    if (this.students.length === 0) {
        console.log("‚ö†Ô∏è L·ªõp ch∆∞a c√≥ h·ªçc sinh.");
        return;
    }

    // 2. In danh s√°ch h·ªçc sinh v·ªõi ƒëi·ªÉm TB v√† x·∫øp lo·∫°i
    this.students.forEach((student, index) => {
        const avg = typeof student.getAverageScore === "function"
            ? student.getAverageScore().toFixed(2)
            : "N/A";
        const grade = typeof student.getGrade === "function"
            ? student.getGrade()
            : "N/A";
        console.log(`${index + 1}. ${student.name} (${student.studentId}) - TB: ${avg} - X·∫øp lo·∫°i: ${grade}`);
    });

    // 3. Th·ªëng k√™ theo x·∫øp lo·∫°i
    const stats = {
        Gioi: 0,
        Kha: 0,
        TrungBinh: 0,
        Yeu: 0
    };

    this.students.forEach(student => {
        if (typeof student.getGrade === "function") {
            const grade = student.getGrade();
            if (grade === "Gi·ªèi") stats.Gioi++;
            else if (grade === "Kh√°") stats.Kha++;
            else if (grade === "Trung b√¨nh") stats.TrungBinh++;
            else if (grade === "Y·∫øu") stats.Yeu++;
        }
    });

    // 4. ƒêi·ªÉm TB l·ªõp
    const classAvg = typeof this.getClassAverage === "function"
        ? this.getClassAverage()
        : 0;

    console.log("\nüìä Th·ªëng k√™ l·ªõp h·ªçc:");
    console.log(`- ƒêi·ªÉm trung b√¨nh l·ªõp: ${classAvg.toFixed(2)}`);
    console.log(`- S·ªë h·ªçc sinh Gi·ªèi: ${stats.Gioi}`);
    console.log(`- S·ªë h·ªçc sinh Kh√°: ${stats.Kha}`);
    console.log(`- S·ªë h·ªçc sinh Trung b√¨nh: ${stats.TrungBinh}`);
    console.log(`- S·ªë h·ªçc sinh Y·∫øu: ${stats.Yeu}`);
    console.log("üìù ================================\n");
}
// Xu·∫•t file danh s√°ch h·ªçc sinh 
exportStudentList(format = "simple") {
    if (this.students.length === 0) {
        console.log("‚ö†Ô∏è L·ªõp ch∆∞a c√≥ h·ªçc sinh ƒë·ªÉ export.");
        return;
    }

    console.log(`üìÑ Danh s√°ch h·ªçc sinh - Format: ${format.toUpperCase()}`);

    this.students.forEach((student, index) => {
        switch (format) {
            case "simple":
                console.log(`${index + 1}. ${student.name} (${student.studentId})`);
                break;

            case "detailed":
                console.log(`${index + 1}. ${student.name} (${student.studentId}) - Tu·ªïi: ${student.age}`);
                if (student.scores.length === 0) {
                    console.log("   ‚ö†Ô∏è Ch∆∞a c√≥ ƒëi·ªÉm.");
                } else {
                    student.scores.forEach(score => {
                        console.log(`   ‚ñ∏ ${score.subject}: ${score.score}`);
                    });
                }
                break;

            case "grades":
                const avg = typeof student.getAverageScore === "function"
                    ? student.getAverageScore().toFixed(2)
                    : "N/A";
                const grade = typeof student.getGrade === "function"
                    ? student.getGrade()
                    : "N/A";
                console.log(`${index + 1}. ${student.name} (${student.studentId}) - TB: ${avg} - X·∫øp lo·∫°i: ${grade}`);
                break;

            default:
                console.log(`‚ùå Format kh√¥ng h·ª£p l·ªá: "${format}". Vui l√≤ng ch·ªçn "simple", "detailed", ho·∫∑c "grades".`);
                return;
        }
    });

    console.log("‚úÖ Xu·∫•t danh s√°ch ho√†n t·∫•t.\n");
}
// import file 
importScoresFromString(dataString) {
    if (!dataString || typeof dataString !== "string") {
        console.log("‚ùå D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá.");
        return;
    }

    const lines = dataString.trim().split("\n");

    lines.forEach((line, index) => {
        const [studentId, subject, scoreStr] = line.split(",");

        if (!studentId || !subject || !scoreStr) {
            console.log(`‚ö†Ô∏è D√≤ng ${index + 1} kh√¥ng h·ª£p l·ªá: ${line}`);
            return;
        }

        const score = parseFloat(scoreStr);

        if (isNaN(score) || score < 0 || score > 10) {
            console.log(`‚ö†Ô∏è ƒêi·ªÉm kh√¥ng h·ª£p l·ªá ·ªü d√≤ng ${index + 1}: ${scoreStr}`);
            return;
        }

        // T√¨m h·ªçc sinh
        const student = this.students.find(s => s.studentId === studentId.trim());

        if (!student) {
            console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y h·ªçc sinh v·ªõi m√£: ${studentId}`);
            return;
        }

        // Th√™m ho·∫∑c c·∫≠p nh·∫≠t ƒëi·ªÉm
        const existing = student.scores.find(s => s.subject.toLowerCase() === subject.trim().toLowerCase());

        if (existing) {
            existing.score = score; // C·∫≠p nh·∫≠t ƒëi·ªÉm n·∫øu ƒë√£ t·ªìn t·∫°i m√¥n
        } else {
            student.scores.push({ subject: subject.trim(), score });
        }

        console.log(`‚úÖ Nh·∫≠p ƒëi·ªÉm th√†nh c√¥ng: ${student.name} - ${subject.trim()} = ${score}`);
    });
} // ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa d·ªØ li·ªáu 
validateAllData() {
    const errors = [];
    const studentIds = new Set();

    this.students.forEach((student, index) => {
        const prefix = `üîç H·ªçc sinh ${index + 1} (${student.name || "Ch∆∞a r√µ"})`;

        // Ki·ªÉm tra th√¥ng tin c∆° b·∫£n
        if (!student.name || !student.age || !student.studentId) {
            errors.push(`${prefix}: Thi·∫øu th√¥ng tin (name, age ho·∫∑c studentId).`);
        }

        // Ki·ªÉm tra tr√πng m√£ SV
        if (studentIds.has(student.studentId)) {
            errors.push(`${prefix}: Tr√πng m√£ sinh vi√™n (${student.studentId}).`);
        } else {
            studentIds.add(student.studentId);
        }

        // Ki·ªÉm tra ƒëi·ªÉm
        if (Array.isArray(student.scores)) {
            student.scores.forEach((scoreObj, i) => {
                const sPrefix = `${prefix} - M√¥n ${i + 1}`;
                if (!scoreObj.subject) {
                    errors.push(`${sPrefix}: Thi·∫øu t√™n m√¥n h·ªçc.`);
                }
                if (
                    typeof scoreObj.score !== "number" ||
                    scoreObj.score < 0 ||
                    scoreObj.score > 10
                ) {
                    errors.push(`${sPrefix}: ƒêi·ªÉm kh√¥ng h·ª£p l·ªá (${scoreObj.score}).`);
                }
            });
        } else {
            errors.push(`${prefix}: scores kh√¥ng ph·∫£i l√† m·∫£ng.`);
        }
    });

    // In k·∫øt qu·∫£
    if (errors.length === 0) {
        console.log("‚úÖ D·ªØ li·ªáu h·ª£p l·ªá ho√†n to√†n.");
        return true;
    } else {
        console.log("‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá:");
        errors.forEach(err => console.log(" - " + err));
        return false;
    }
}
   
}
class Student {
    constructor(name, age, studentId) {
        this.name = name;
        this.age = age;
        this.studentId = studentId;
        this.scores = [];
    } // t√≠nh ƒëi·ªÉm trung b√¨nh c·ªßa h·ªçc sinh 
    getAverageScore() {
    if (this.scores.length === 0) return 0;
    const total = this.scores.reduce((sum, s) => sum + s.score, 0);
    return total / this.scores.length;
}
getGrade() {
    const avg = this.getAverageScore();
    if (avg >= 8.5) return "Gi·ªèi";
    if (avg >= 7) return "Kh√°";
    if (avg >= 5) return "Trung b√¨nh";
    return "Y·∫øu";
}
}
class DataProcessor {
    static formatStudentData(students) {
        if (!Array.isArray(students)) {
            throw new Error("Tham s·ªë ƒë·∫ßu v√†o ph·∫£i l√† m·ªôt m·∫£ng h·ªçc sinh.");
        }

        return students.map(student => {
            const averageScore = typeof student.getAverageScore === "function"
                ? student.getAverageScore().toFixed(2)
                : "N/A";

            const grade = typeof student.getGrade === "function"
                ? student.getGrade()
                : "N/A";

            return {
                studentId: student.studentId || "N/A",
                name: student.name || "Ch∆∞a c√≥ t√™n",
                averageScore,
                grade
            };
        });
    } // T√≠nh ph√¢n b·ªë ƒëi·ªÉm: bao nhi√™u % Gi·ªèi, Kh√°, TB, Y·∫øu
  static calculateGradeDistribution(students) {
        if (!Array.isArray(students) || students.length === 0) {
            return {
                Gioi: 0,
                Kha: 0,
                TrungBinh: 0,
                Yeu: 0
            };
        }

        const total = students.length;
        const counts = {
            Gioi: 0,
            Kha: 0,
            TrungBinh: 0,
            Yeu: 0
        };

        students.forEach(student => {
            const grade = typeof student.getGrade === "function"
                ? student.getGrade()
                : null;

            switch (grade) {
                case "Gi·ªèi":
                    counts.Gioi++;
                    break;
                case "Kh√°":
                    counts.Kha++;
                    break;
                case "Trung b√¨nh":
                    counts.TrungBinh++;
                    break;
                case "Y·∫øu":
                    counts.Yeu++;
                    break;
                default:
                    // B·ªè qua n·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c x·∫øp lo·∫°i
                    break;
            }
        });

        // Chuy·ªÉn sang % v√† l√†m tr√≤n 2 ch·ªØ s·ªë
        return {
            Gioi: parseFloat(((counts.Gioi / total) * 100).toFixed(2)),
            Kha: parseFloat(((counts.Kha / total) * 100).toFixed(2)),
            TrungBinh: parseFloat(((counts.TrungBinh / total) * 100).toFixed(2)),
            Yeu: parseFloat(((counts.Yeu / total) * 100).toFixed(2))
        };
    }  
   // T·ª± ƒë·ªông t·∫°o m√£ h·ªçc sinh t·ª´ t√™n

    static generateStudentId(name, existingIds = []) {
        if (typeof name !== "string" || name.trim() === "") {
            throw new Error("T√™n h·ªçc sinh kh√¥ng h·ª£p l·ªá.");
        }

        const normalized = name
            .trim()
            .toLowerCase()
            .split(/\s+/)              // T√°ch theo kho·∫£ng tr·∫Øng
            .map(word => word[0])     // L·∫•y ch·ªØ c√°i ƒë·∫ßu m·ªói t·ª´
            .join("");                // Gh√©p l·∫°i th√†nh m√£ g·ªëc

        let count = 1;
        let studentId = "";

        // L·∫∑p ƒë·∫øn khi t√¨m ƒë∆∞·ª£c m√£ ch∆∞a tr√πng
        do {
            const suffix = count.toString().padStart(3, "0"); // 001, 002, ...
            studentId = `${normalized}${suffix}`;
            count++;
        } while (existingIds.includes(studentId));

        return studentId;
    }
    // Parse d·ªØ li·ªáu CSV th√†nh array objects

    static parseCSVData(csvString) {
        if (typeof csvString !== 'string' || !csvString.trim()) {
            throw new Error("CSV ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá.");
        }

        const lines = csvString.trim().split('\n');
        const headers = lines[0].split(',').map(h => h.trim());

        const data = [];

        for (let i = 1; i < lines.length; i++) {
            const values = lines[i].split(',').map(v => v.trim());
            if (values.length !== headers.length) {
                console.warn(`‚ö†Ô∏è D√≤ng ${i + 1} b·ªã sai ƒë·ªãnh d·∫°ng, b·ªè qua.`);
                continue;
            }

            const obj = {};
            headers.forEach((header, index) => {
                obj[header] = values[index];
            });

            data.push(obj);
        }

        return data;
    }
} 


const classA = new ClassRoom("10A1", "C√¥ H·∫°nh");

const sv1 = new Student("Nguy·ªÖn VƒÉn An", 16, "SV001");
const sv2 = new Student("Tr·∫ßn Th·ªã B√¨nh", 17, "SV002");
const sv3 = new Student("Nguy·ªÖn VƒÉn An", 16, "SV001"); // Tr√πng m√£
const sv4 = new Student("L√™ Th·ªã Di·ªáp", 16, "SV003")
sv1.scores = [{ subject: "To√°n", score: 9 }, { subject: "VƒÉn", score: 7 },{ subject: "L√Ω", score: 8 },{ subject: "H√≥a", score: 7 },{subject: "Anh", score: 10}  ];
sv2.scores = [{ subject: "To√°n", score: 8 }, { subject: "VƒÉn", score: 5 }, { subject: "L√Ω", score: 8 },{ subject: "H√≥a", score: 7 },{subject: "Anh", score: 8} ];
sv4.scores = [{ subject: "To√°n", score: 10 }, { subject: "VƒÉn", score: 8 }, { subject: "L√Ω", score: 8 },{ subject: "H√≥a", score: 7 },{subject: "Anh", score: 8} ];
const csvData = `
SV001,To√°n,9
SV002,L√Ω,7.5
SV003,VƒÉn,8
SV999,H√≥a,10  // kh√¥ng t·ªìn t·∫°i
SV001,,10     // thi·∫øu m√¥n
SV002,Anh,abc // sai ƒëi·ªÉm
`;
const students = [sv1, sv2];
const formatted = DataProcessor.formatStudentData(students);
const stats = DataProcessor.calculateGradeDistribution([sv1, sv2, sv3, sv4]);
const existing = ["nva001", "nva002", "nva003"];
const name = "Nguy·ªÖn VƒÉn An";

const newId = DataProcessor.generateStudentId(name, existing);
const csv = `
studentId,name,age
SV001,Nguy·ªÖn VƒÉn An,16
SV002,L√™ Th·ªã B√≠ch,17
SV003,L√™,Th·ª´a,18     // d√≤ng sai ƒë·ªãnh d·∫°ng
`;

const result = DataProcessor.parseCSVData(csv);




classA.addStudent(sv1); // ‚úÖ Th√™m th√†nh c√¥ng
classA.addStudent(sv2); // ‚úÖ Th√™m th√†nh c√¥ng
classA.addStudent(sv3); // ‚ùå Tr√πng m√£
classA.addStudent(sv4);
classA.removeStudent("SV001");
classA.findStudent("B√¨nh");     // T√¨m theo t√™n
classA.findStudent("sv002");  // T√¨m theo m√£
classA.findStudent("xyz");    // Kh√¥ng t√¨m th·∫•y
console.log("üéØ ƒêi·ªÉm trung b√¨nh c·∫£ l·ªõp:", classA.getClassAverage()); // ƒëi·ªÉm trung b√¨nh c·ªßa c·∫£ l·ªõp 
classA.getTopStudents(1); // h·ªçc sinh ƒëi·ªÉm cao nh·∫•t
classA.getSubjectStatistics("VƒÉn");
classA.generateReport();
classA.exportStudentList("simple"); // export d·ªØ li·ªáu 
classA.exportStudentList("detailed"); 
classA.exportStudentList("grades");
classA.importScoresFromString(csvData); // import d·ªØ li·ªáu
classA.validateAllData(); // ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
console.table(formatted); // fomat danh s√°ch h·ªçc sinh 
console.log(stats); // ph√¢n b·ªï % bao nhi√™u gi·ªèi , kh√°c , TB , y·∫øu
console.log(newId); // t·ª± ƒë·ªông t·∫°o t√™n m√£
console.log(result); //Parse d·ªØ li·ªáu CSV th√†nh array objects
